
/*
   DO NOT EDIT THIS FILE!

   This file is automatically generated by hpy.tools.autogen.debug.autogen_debug_ctx_h
   See also hpy.tools.autogen and hpy/tools/public_api.h

   Run this to regenerate:
       make autogen

*/

DHPy debug_ctx_Module_Create(HPyContext ctx, HPyModuleDef *def);
DHPy debug_ctx_Dup(HPyContext ctx, DHPy h);
void debug_ctx_Close(HPyContext ctx, DHPy h);
DHPy debug_ctx_Long_FromLong(HPyContext ctx, long value);
DHPy debug_ctx_Long_FromUnsignedLong(HPyContext ctx, unsigned long value);
DHPy debug_ctx_Long_FromLongLong(HPyContext ctx, long long v);
DHPy debug_ctx_Long_FromUnsignedLongLong(HPyContext ctx, unsigned long long v);
DHPy debug_ctx_Long_FromSize_t(HPyContext ctx, size_t value);
DHPy debug_ctx_Long_FromSsize_t(HPyContext ctx, HPy_ssize_t value);
long debug_ctx_Long_AsLong(HPyContext ctx, DHPy h);
unsigned long debug_ctx_Long_AsUnsignedLong(HPyContext ctx, DHPy h);
unsigned long debug_ctx_Long_AsUnsignedLongMask(HPyContext ctx, DHPy h);
long long debug_ctx_Long_AsLongLong(HPyContext ctx, DHPy h);
unsigned long long debug_ctx_Long_AsUnsignedLongLong(HPyContext ctx, DHPy h);
unsigned long long debug_ctx_Long_AsUnsignedLongLongMask(HPyContext ctx, DHPy h);
size_t debug_ctx_Long_AsSize_t(HPyContext ctx, DHPy h);
HPy_ssize_t debug_ctx_Long_AsSsize_t(HPyContext ctx, DHPy h);
DHPy debug_ctx_Float_FromDouble(HPyContext ctx, double v);
double debug_ctx_Float_AsDouble(HPyContext ctx, DHPy h);
HPy_ssize_t debug_ctx_Length(HPyContext ctx, DHPy h);
int debug_ctx_Number_Check(HPyContext ctx, DHPy h);
DHPy debug_ctx_Add(HPyContext ctx, DHPy h1, DHPy h2);
DHPy debug_ctx_Subtract(HPyContext ctx, DHPy h1, DHPy h2);
DHPy debug_ctx_Multiply(HPyContext ctx, DHPy h1, DHPy h2);
DHPy debug_ctx_MatrixMultiply(HPyContext ctx, DHPy h1, DHPy h2);
DHPy debug_ctx_FloorDivide(HPyContext ctx, DHPy h1, DHPy h2);
DHPy debug_ctx_TrueDivide(HPyContext ctx, DHPy h1, DHPy h2);
DHPy debug_ctx_Remainder(HPyContext ctx, DHPy h1, DHPy h2);
DHPy debug_ctx_Divmod(HPyContext ctx, DHPy h1, DHPy h2);
DHPy debug_ctx_Power(HPyContext ctx, DHPy h1, DHPy h2, DHPy h3);
DHPy debug_ctx_Negative(HPyContext ctx, DHPy h1);
DHPy debug_ctx_Positive(HPyContext ctx, DHPy h1);
DHPy debug_ctx_Absolute(HPyContext ctx, DHPy h1);
DHPy debug_ctx_Invert(HPyContext ctx, DHPy h1);
DHPy debug_ctx_Lshift(HPyContext ctx, DHPy h1, DHPy h2);
DHPy debug_ctx_Rshift(HPyContext ctx, DHPy h1, DHPy h2);
DHPy debug_ctx_And(HPyContext ctx, DHPy h1, DHPy h2);
DHPy debug_ctx_Xor(HPyContext ctx, DHPy h1, DHPy h2);
DHPy debug_ctx_Or(HPyContext ctx, DHPy h1, DHPy h2);
DHPy debug_ctx_Index(HPyContext ctx, DHPy h1);
DHPy debug_ctx_Long(HPyContext ctx, DHPy h1);
DHPy debug_ctx_Float(HPyContext ctx, DHPy h1);
DHPy debug_ctx_InPlaceAdd(HPyContext ctx, DHPy h1, DHPy h2);
DHPy debug_ctx_InPlaceSubtract(HPyContext ctx, DHPy h1, DHPy h2);
DHPy debug_ctx_InPlaceMultiply(HPyContext ctx, DHPy h1, DHPy h2);
DHPy debug_ctx_InPlaceMatrixMultiply(HPyContext ctx, DHPy h1, DHPy h2);
DHPy debug_ctx_InPlaceFloorDivide(HPyContext ctx, DHPy h1, DHPy h2);
DHPy debug_ctx_InPlaceTrueDivide(HPyContext ctx, DHPy h1, DHPy h2);
DHPy debug_ctx_InPlaceRemainder(HPyContext ctx, DHPy h1, DHPy h2);
DHPy debug_ctx_InPlacePower(HPyContext ctx, DHPy h1, DHPy h2, DHPy h3);
DHPy debug_ctx_InPlaceLshift(HPyContext ctx, DHPy h1, DHPy h2);
DHPy debug_ctx_InPlaceRshift(HPyContext ctx, DHPy h1, DHPy h2);
DHPy debug_ctx_InPlaceAnd(HPyContext ctx, DHPy h1, DHPy h2);
DHPy debug_ctx_InPlaceXor(HPyContext ctx, DHPy h1, DHPy h2);
DHPy debug_ctx_InPlaceOr(HPyContext ctx, DHPy h1, DHPy h2);
int debug_ctx_Callable_Check(HPyContext ctx, DHPy h);
DHPy debug_ctx_CallTupleDict(HPyContext ctx, DHPy callable, DHPy args, DHPy kw);
void debug_ctx_FatalError(HPyContext ctx, const char *message);
void debug_ctx_Err_SetString(HPyContext ctx, DHPy h_type, const char *message);
void debug_ctx_Err_SetObject(HPyContext ctx, DHPy h_type, DHPy h_value);
int debug_ctx_Err_Occurred(HPyContext ctx);
DHPy debug_ctx_Err_NoMemory(HPyContext ctx);
void debug_ctx_Err_Clear(HPyContext ctx);
int debug_ctx_IsTrue(HPyContext ctx, DHPy h);
DHPy debug_ctx_Type_FromSpec(HPyContext ctx, HPyType_Spec *spec, HPyType_SpecParam *params);
DHPy debug_ctx_Type_GenericNew(HPyContext ctx, DHPy type, DHPy *args, HPy_ssize_t nargs, DHPy kw);
DHPy debug_ctx_GetAttr(HPyContext ctx, DHPy obj, DHPy name);
DHPy debug_ctx_GetAttr_s(HPyContext ctx, DHPy obj, const char *name);
int debug_ctx_HasAttr(HPyContext ctx, DHPy obj, DHPy name);
int debug_ctx_HasAttr_s(HPyContext ctx, DHPy obj, const char *name);
int debug_ctx_SetAttr(HPyContext ctx, DHPy obj, DHPy name, DHPy value);
int debug_ctx_SetAttr_s(HPyContext ctx, DHPy obj, const char *name, DHPy value);
DHPy debug_ctx_GetItem(HPyContext ctx, DHPy obj, DHPy key);
DHPy debug_ctx_GetItem_i(HPyContext ctx, DHPy obj, HPy_ssize_t idx);
DHPy debug_ctx_GetItem_s(HPyContext ctx, DHPy obj, const char *key);
int debug_ctx_SetItem(HPyContext ctx, DHPy obj, DHPy key, DHPy value);
int debug_ctx_SetItem_i(HPyContext ctx, DHPy obj, HPy_ssize_t idx, DHPy value);
int debug_ctx_SetItem_s(HPyContext ctx, DHPy obj, const char *key, DHPy value);
void *debug_ctx_Cast(HPyContext ctx, DHPy h);
DHPy debug_ctx_New(HPyContext ctx, DHPy h_type, void **data);
DHPy debug_ctx_Repr(HPyContext ctx, DHPy obj);
DHPy debug_ctx_Str(HPyContext ctx, DHPy obj);
DHPy debug_ctx_ASCII(HPyContext ctx, DHPy obj);
DHPy debug_ctx_Bytes(HPyContext ctx, DHPy obj);
DHPy debug_ctx_RichCompare(HPyContext ctx, DHPy v, DHPy w, int op);
int debug_ctx_RichCompareBool(HPyContext ctx, DHPy v, DHPy w, int op);
HPy_hash_t debug_ctx_Hash(HPyContext ctx, DHPy obj);
int debug_ctx_Bytes_Check(HPyContext ctx, DHPy h);
HPy_ssize_t debug_ctx_Bytes_Size(HPyContext ctx, DHPy h);
HPy_ssize_t debug_ctx_Bytes_GET_SIZE(HPyContext ctx, DHPy h);
char *debug_ctx_Bytes_AsString(HPyContext ctx, DHPy h);
char *debug_ctx_Bytes_AS_STRING(HPyContext ctx, DHPy h);
DHPy debug_ctx_Bytes_FromString(HPyContext ctx, const char *v);
DHPy debug_ctx_Bytes_FromStringAndSize(HPyContext ctx, const char *v, HPy_ssize_t len);
DHPy debug_ctx_Unicode_FromString(HPyContext ctx, const char *utf8);
int debug_ctx_Unicode_Check(HPyContext ctx, DHPy h);
DHPy debug_ctx_Unicode_AsUTF8String(HPyContext ctx, DHPy h);
DHPy debug_ctx_Unicode_FromWideChar(HPyContext ctx, const wchar_t *w, HPy_ssize_t size);
int debug_ctx_List_Check(HPyContext ctx, DHPy h);
DHPy debug_ctx_List_New(HPyContext ctx, HPy_ssize_t len);
int debug_ctx_List_Append(HPyContext ctx, DHPy h_list, DHPy h_item);
int debug_ctx_Dict_Check(HPyContext ctx, DHPy h);
DHPy debug_ctx_Dict_New(HPyContext ctx);
int debug_ctx_Tuple_Check(HPyContext ctx, DHPy h);
DHPy debug_ctx_Tuple_FromArray(HPyContext ctx, DHPy items[], HPy_ssize_t n);
DHPy debug_ctx_FromPyObject(HPyContext ctx, cpy_PyObject *obj);
cpy_PyObject *debug_ctx_AsPyObject(HPyContext ctx, DHPy h);
void debug_ctx_CallRealFunctionFromTrampoline(HPyContext ctx, HPyFunc_Signature sig, void *func, void *args);
void debug_ctx_CallDestroyAndThenDealloc(HPyContext ctx, void *func, cpy_PyObject *self);
HPyListBuilder debug_ctx_ListBuilder_New(HPyContext ctx, HPy_ssize_t initial_size);
void debug_ctx_ListBuilder_Set(HPyContext ctx, HPyListBuilder builder, HPy_ssize_t index, DHPy h_item);
DHPy debug_ctx_ListBuilder_Build(HPyContext ctx, HPyListBuilder builder);
void debug_ctx_ListBuilder_Cancel(HPyContext ctx, HPyListBuilder builder);
HPyTupleBuilder debug_ctx_TupleBuilder_New(HPyContext ctx, HPy_ssize_t initial_size);
void debug_ctx_TupleBuilder_Set(HPyContext ctx, HPyTupleBuilder builder, HPy_ssize_t index, DHPy h_item);
DHPy debug_ctx_TupleBuilder_Build(HPyContext ctx, HPyTupleBuilder builder);
void debug_ctx_TupleBuilder_Cancel(HPyContext ctx, HPyTupleBuilder builder);
HPyTracker debug_ctx_Tracker_New(HPyContext ctx, HPy_ssize_t size);
int debug_ctx_Tracker_Add(HPyContext ctx, HPyTracker ht, DHPy h);
void debug_ctx_Tracker_ForgetAll(HPyContext ctx, HPyTracker ht);
void debug_ctx_Tracker_Close(HPyContext ctx, HPyTracker ht);
void debug_ctx_Dump(HPyContext ctx, DHPy h);

static inline void debug_init_prebuilt_handles(HPyContext ctx, HPyContext original_ctx)
{
    ctx->h_None = DHPy_wrap(ctx, original_ctx->h_None);
    ctx->h_True = DHPy_wrap(ctx, original_ctx->h_True);
    ctx->h_False = DHPy_wrap(ctx, original_ctx->h_False);
    ctx->h_BaseException = DHPy_wrap(ctx, original_ctx->h_BaseException);
    ctx->h_Exception = DHPy_wrap(ctx, original_ctx->h_Exception);
    ctx->h_StopAsyncIteration = DHPy_wrap(ctx, original_ctx->h_StopAsyncIteration);
    ctx->h_StopIteration = DHPy_wrap(ctx, original_ctx->h_StopIteration);
    ctx->h_GeneratorExit = DHPy_wrap(ctx, original_ctx->h_GeneratorExit);
    ctx->h_ArithmeticError = DHPy_wrap(ctx, original_ctx->h_ArithmeticError);
    ctx->h_LookupError = DHPy_wrap(ctx, original_ctx->h_LookupError);
    ctx->h_AssertionError = DHPy_wrap(ctx, original_ctx->h_AssertionError);
    ctx->h_AttributeError = DHPy_wrap(ctx, original_ctx->h_AttributeError);
    ctx->h_BufferError = DHPy_wrap(ctx, original_ctx->h_BufferError);
    ctx->h_EOFError = DHPy_wrap(ctx, original_ctx->h_EOFError);
    ctx->h_FloatingPointError = DHPy_wrap(ctx, original_ctx->h_FloatingPointError);
    ctx->h_OSError = DHPy_wrap(ctx, original_ctx->h_OSError);
    ctx->h_ImportError = DHPy_wrap(ctx, original_ctx->h_ImportError);
    ctx->h_ModuleNotFoundError = DHPy_wrap(ctx, original_ctx->h_ModuleNotFoundError);
    ctx->h_IndexError = DHPy_wrap(ctx, original_ctx->h_IndexError);
    ctx->h_KeyError = DHPy_wrap(ctx, original_ctx->h_KeyError);
    ctx->h_KeyboardInterrupt = DHPy_wrap(ctx, original_ctx->h_KeyboardInterrupt);
    ctx->h_MemoryError = DHPy_wrap(ctx, original_ctx->h_MemoryError);
    ctx->h_NameError = DHPy_wrap(ctx, original_ctx->h_NameError);
    ctx->h_OverflowError = DHPy_wrap(ctx, original_ctx->h_OverflowError);
    ctx->h_RuntimeError = DHPy_wrap(ctx, original_ctx->h_RuntimeError);
    ctx->h_RecursionError = DHPy_wrap(ctx, original_ctx->h_RecursionError);
    ctx->h_NotImplementedError = DHPy_wrap(ctx, original_ctx->h_NotImplementedError);
    ctx->h_SyntaxError = DHPy_wrap(ctx, original_ctx->h_SyntaxError);
    ctx->h_IndentationError = DHPy_wrap(ctx, original_ctx->h_IndentationError);
    ctx->h_TabError = DHPy_wrap(ctx, original_ctx->h_TabError);
    ctx->h_ReferenceError = DHPy_wrap(ctx, original_ctx->h_ReferenceError);
    ctx->h_SystemError = DHPy_wrap(ctx, original_ctx->h_SystemError);
    ctx->h_SystemExit = DHPy_wrap(ctx, original_ctx->h_SystemExit);
    ctx->h_TypeError = DHPy_wrap(ctx, original_ctx->h_TypeError);
    ctx->h_UnboundLocalError = DHPy_wrap(ctx, original_ctx->h_UnboundLocalError);
    ctx->h_UnicodeError = DHPy_wrap(ctx, original_ctx->h_UnicodeError);
    ctx->h_UnicodeEncodeError = DHPy_wrap(ctx, original_ctx->h_UnicodeEncodeError);
    ctx->h_UnicodeDecodeError = DHPy_wrap(ctx, original_ctx->h_UnicodeDecodeError);
    ctx->h_UnicodeTranslateError = DHPy_wrap(ctx, original_ctx->h_UnicodeTranslateError);
    ctx->h_ValueError = DHPy_wrap(ctx, original_ctx->h_ValueError);
    ctx->h_ZeroDivisionError = DHPy_wrap(ctx, original_ctx->h_ZeroDivisionError);
    ctx->h_BlockingIOError = DHPy_wrap(ctx, original_ctx->h_BlockingIOError);
    ctx->h_BrokenPipeError = DHPy_wrap(ctx, original_ctx->h_BrokenPipeError);
    ctx->h_ChildProcessError = DHPy_wrap(ctx, original_ctx->h_ChildProcessError);
    ctx->h_ConnectionError = DHPy_wrap(ctx, original_ctx->h_ConnectionError);
    ctx->h_ConnectionAbortedError = DHPy_wrap(ctx, original_ctx->h_ConnectionAbortedError);
    ctx->h_ConnectionRefusedError = DHPy_wrap(ctx, original_ctx->h_ConnectionRefusedError);
    ctx->h_ConnectionResetError = DHPy_wrap(ctx, original_ctx->h_ConnectionResetError);
    ctx->h_FileExistsError = DHPy_wrap(ctx, original_ctx->h_FileExistsError);
    ctx->h_FileNotFoundError = DHPy_wrap(ctx, original_ctx->h_FileNotFoundError);
    ctx->h_InterruptedError = DHPy_wrap(ctx, original_ctx->h_InterruptedError);
    ctx->h_IsADirectoryError = DHPy_wrap(ctx, original_ctx->h_IsADirectoryError);
    ctx->h_NotADirectoryError = DHPy_wrap(ctx, original_ctx->h_NotADirectoryError);
    ctx->h_PermissionError = DHPy_wrap(ctx, original_ctx->h_PermissionError);
    ctx->h_ProcessLookupError = DHPy_wrap(ctx, original_ctx->h_ProcessLookupError);
    ctx->h_TimeoutError = DHPy_wrap(ctx, original_ctx->h_TimeoutError);
    ctx->h_Warning = DHPy_wrap(ctx, original_ctx->h_Warning);
    ctx->h_UserWarning = DHPy_wrap(ctx, original_ctx->h_UserWarning);
    ctx->h_DeprecationWarning = DHPy_wrap(ctx, original_ctx->h_DeprecationWarning);
    ctx->h_PendingDeprecationWarning = DHPy_wrap(ctx, original_ctx->h_PendingDeprecationWarning);
    ctx->h_SyntaxWarning = DHPy_wrap(ctx, original_ctx->h_SyntaxWarning);
    ctx->h_RuntimeWarning = DHPy_wrap(ctx, original_ctx->h_RuntimeWarning);
    ctx->h_FutureWarning = DHPy_wrap(ctx, original_ctx->h_FutureWarning);
    ctx->h_ImportWarning = DHPy_wrap(ctx, original_ctx->h_ImportWarning);
    ctx->h_UnicodeWarning = DHPy_wrap(ctx, original_ctx->h_UnicodeWarning);
    ctx->h_BytesWarning = DHPy_wrap(ctx, original_ctx->h_BytesWarning);
    ctx->h_ResourceWarning = DHPy_wrap(ctx, original_ctx->h_ResourceWarning);
    ctx->h_BaseObjectType = DHPy_wrap(ctx, original_ctx->h_BaseObjectType);
    ctx->h_TypeType = DHPy_wrap(ctx, original_ctx->h_TypeType);
    ctx->h_LongType = DHPy_wrap(ctx, original_ctx->h_LongType);
    ctx->h_UnicodeType = DHPy_wrap(ctx, original_ctx->h_UnicodeType);
    ctx->h_TupleType = DHPy_wrap(ctx, original_ctx->h_TupleType);
    ctx->h_ListType = DHPy_wrap(ctx, original_ctx->h_ListType);
}

static struct _HPyContext_s g_debug_ctx = {
    .name = "HPy Debug Mode ABI",
    ._private = NULL,
    .ctx_version = 1,
    .h_None = HPy_NULL,
    .h_True = HPy_NULL,
    .h_False = HPy_NULL,
    .h_BaseException = HPy_NULL,
    .h_Exception = HPy_NULL,
    .h_StopAsyncIteration = HPy_NULL,
    .h_StopIteration = HPy_NULL,
    .h_GeneratorExit = HPy_NULL,
    .h_ArithmeticError = HPy_NULL,
    .h_LookupError = HPy_NULL,
    .h_AssertionError = HPy_NULL,
    .h_AttributeError = HPy_NULL,
    .h_BufferError = HPy_NULL,
    .h_EOFError = HPy_NULL,
    .h_FloatingPointError = HPy_NULL,
    .h_OSError = HPy_NULL,
    .h_ImportError = HPy_NULL,
    .h_ModuleNotFoundError = HPy_NULL,
    .h_IndexError = HPy_NULL,
    .h_KeyError = HPy_NULL,
    .h_KeyboardInterrupt = HPy_NULL,
    .h_MemoryError = HPy_NULL,
    .h_NameError = HPy_NULL,
    .h_OverflowError = HPy_NULL,
    .h_RuntimeError = HPy_NULL,
    .h_RecursionError = HPy_NULL,
    .h_NotImplementedError = HPy_NULL,
    .h_SyntaxError = HPy_NULL,
    .h_IndentationError = HPy_NULL,
    .h_TabError = HPy_NULL,
    .h_ReferenceError = HPy_NULL,
    .h_SystemError = HPy_NULL,
    .h_SystemExit = HPy_NULL,
    .h_TypeError = HPy_NULL,
    .h_UnboundLocalError = HPy_NULL,
    .h_UnicodeError = HPy_NULL,
    .h_UnicodeEncodeError = HPy_NULL,
    .h_UnicodeDecodeError = HPy_NULL,
    .h_UnicodeTranslateError = HPy_NULL,
    .h_ValueError = HPy_NULL,
    .h_ZeroDivisionError = HPy_NULL,
    .h_BlockingIOError = HPy_NULL,
    .h_BrokenPipeError = HPy_NULL,
    .h_ChildProcessError = HPy_NULL,
    .h_ConnectionError = HPy_NULL,
    .h_ConnectionAbortedError = HPy_NULL,
    .h_ConnectionRefusedError = HPy_NULL,
    .h_ConnectionResetError = HPy_NULL,
    .h_FileExistsError = HPy_NULL,
    .h_FileNotFoundError = HPy_NULL,
    .h_InterruptedError = HPy_NULL,
    .h_IsADirectoryError = HPy_NULL,
    .h_NotADirectoryError = HPy_NULL,
    .h_PermissionError = HPy_NULL,
    .h_ProcessLookupError = HPy_NULL,
    .h_TimeoutError = HPy_NULL,
    .h_Warning = HPy_NULL,
    .h_UserWarning = HPy_NULL,
    .h_DeprecationWarning = HPy_NULL,
    .h_PendingDeprecationWarning = HPy_NULL,
    .h_SyntaxWarning = HPy_NULL,
    .h_RuntimeWarning = HPy_NULL,
    .h_FutureWarning = HPy_NULL,
    .h_ImportWarning = HPy_NULL,
    .h_UnicodeWarning = HPy_NULL,
    .h_BytesWarning = HPy_NULL,
    .h_ResourceWarning = HPy_NULL,
    .h_BaseObjectType = HPy_NULL,
    .h_TypeType = HPy_NULL,
    .h_LongType = HPy_NULL,
    .h_UnicodeType = HPy_NULL,
    .h_TupleType = HPy_NULL,
    .h_ListType = HPy_NULL,
    .ctx_Module_Create = &debug_ctx_Module_Create,
    .ctx_Dup = &debug_ctx_Dup,
    .ctx_Close = &debug_ctx_Close,
    .ctx_Long_FromLong = &debug_ctx_Long_FromLong,
    .ctx_Long_FromUnsignedLong = &debug_ctx_Long_FromUnsignedLong,
    .ctx_Long_FromLongLong = &debug_ctx_Long_FromLongLong,
    .ctx_Long_FromUnsignedLongLong = &debug_ctx_Long_FromUnsignedLongLong,
    .ctx_Long_FromSize_t = &debug_ctx_Long_FromSize_t,
    .ctx_Long_FromSsize_t = &debug_ctx_Long_FromSsize_t,
    .ctx_Long_AsLong = &debug_ctx_Long_AsLong,
    .ctx_Long_AsUnsignedLong = &debug_ctx_Long_AsUnsignedLong,
    .ctx_Long_AsUnsignedLongMask = &debug_ctx_Long_AsUnsignedLongMask,
    .ctx_Long_AsLongLong = &debug_ctx_Long_AsLongLong,
    .ctx_Long_AsUnsignedLongLong = &debug_ctx_Long_AsUnsignedLongLong,
    .ctx_Long_AsUnsignedLongLongMask = &debug_ctx_Long_AsUnsignedLongLongMask,
    .ctx_Long_AsSize_t = &debug_ctx_Long_AsSize_t,
    .ctx_Long_AsSsize_t = &debug_ctx_Long_AsSsize_t,
    .ctx_Float_FromDouble = &debug_ctx_Float_FromDouble,
    .ctx_Float_AsDouble = &debug_ctx_Float_AsDouble,
    .ctx_Length = &debug_ctx_Length,
    .ctx_Number_Check = &debug_ctx_Number_Check,
    .ctx_Add = &debug_ctx_Add,
    .ctx_Subtract = &debug_ctx_Subtract,
    .ctx_Multiply = &debug_ctx_Multiply,
    .ctx_MatrixMultiply = &debug_ctx_MatrixMultiply,
    .ctx_FloorDivide = &debug_ctx_FloorDivide,
    .ctx_TrueDivide = &debug_ctx_TrueDivide,
    .ctx_Remainder = &debug_ctx_Remainder,
    .ctx_Divmod = &debug_ctx_Divmod,
    .ctx_Power = &debug_ctx_Power,
    .ctx_Negative = &debug_ctx_Negative,
    .ctx_Positive = &debug_ctx_Positive,
    .ctx_Absolute = &debug_ctx_Absolute,
    .ctx_Invert = &debug_ctx_Invert,
    .ctx_Lshift = &debug_ctx_Lshift,
    .ctx_Rshift = &debug_ctx_Rshift,
    .ctx_And = &debug_ctx_And,
    .ctx_Xor = &debug_ctx_Xor,
    .ctx_Or = &debug_ctx_Or,
    .ctx_Index = &debug_ctx_Index,
    .ctx_Long = &debug_ctx_Long,
    .ctx_Float = &debug_ctx_Float,
    .ctx_InPlaceAdd = &debug_ctx_InPlaceAdd,
    .ctx_InPlaceSubtract = &debug_ctx_InPlaceSubtract,
    .ctx_InPlaceMultiply = &debug_ctx_InPlaceMultiply,
    .ctx_InPlaceMatrixMultiply = &debug_ctx_InPlaceMatrixMultiply,
    .ctx_InPlaceFloorDivide = &debug_ctx_InPlaceFloorDivide,
    .ctx_InPlaceTrueDivide = &debug_ctx_InPlaceTrueDivide,
    .ctx_InPlaceRemainder = &debug_ctx_InPlaceRemainder,
    .ctx_InPlacePower = &debug_ctx_InPlacePower,
    .ctx_InPlaceLshift = &debug_ctx_InPlaceLshift,
    .ctx_InPlaceRshift = &debug_ctx_InPlaceRshift,
    .ctx_InPlaceAnd = &debug_ctx_InPlaceAnd,
    .ctx_InPlaceXor = &debug_ctx_InPlaceXor,
    .ctx_InPlaceOr = &debug_ctx_InPlaceOr,
    .ctx_Callable_Check = &debug_ctx_Callable_Check,
    .ctx_CallTupleDict = &debug_ctx_CallTupleDict,
    .ctx_FatalError = &debug_ctx_FatalError,
    .ctx_Err_SetString = &debug_ctx_Err_SetString,
    .ctx_Err_SetObject = &debug_ctx_Err_SetObject,
    .ctx_Err_Occurred = &debug_ctx_Err_Occurred,
    .ctx_Err_NoMemory = &debug_ctx_Err_NoMemory,
    .ctx_Err_Clear = &debug_ctx_Err_Clear,
    .ctx_IsTrue = &debug_ctx_IsTrue,
    .ctx_Type_FromSpec = &debug_ctx_Type_FromSpec,
    .ctx_Type_GenericNew = &debug_ctx_Type_GenericNew,
    .ctx_GetAttr = &debug_ctx_GetAttr,
    .ctx_GetAttr_s = &debug_ctx_GetAttr_s,
    .ctx_HasAttr = &debug_ctx_HasAttr,
    .ctx_HasAttr_s = &debug_ctx_HasAttr_s,
    .ctx_SetAttr = &debug_ctx_SetAttr,
    .ctx_SetAttr_s = &debug_ctx_SetAttr_s,
    .ctx_GetItem = &debug_ctx_GetItem,
    .ctx_GetItem_i = &debug_ctx_GetItem_i,
    .ctx_GetItem_s = &debug_ctx_GetItem_s,
    .ctx_SetItem = &debug_ctx_SetItem,
    .ctx_SetItem_i = &debug_ctx_SetItem_i,
    .ctx_SetItem_s = &debug_ctx_SetItem_s,
    .ctx_Cast = &debug_ctx_Cast,
    .ctx_New = &debug_ctx_New,
    .ctx_Repr = &debug_ctx_Repr,
    .ctx_Str = &debug_ctx_Str,
    .ctx_ASCII = &debug_ctx_ASCII,
    .ctx_Bytes = &debug_ctx_Bytes,
    .ctx_RichCompare = &debug_ctx_RichCompare,
    .ctx_RichCompareBool = &debug_ctx_RichCompareBool,
    .ctx_Hash = &debug_ctx_Hash,
    .ctx_Bytes_Check = &debug_ctx_Bytes_Check,
    .ctx_Bytes_Size = &debug_ctx_Bytes_Size,
    .ctx_Bytes_GET_SIZE = &debug_ctx_Bytes_GET_SIZE,
    .ctx_Bytes_AsString = &debug_ctx_Bytes_AsString,
    .ctx_Bytes_AS_STRING = &debug_ctx_Bytes_AS_STRING,
    .ctx_Bytes_FromString = &debug_ctx_Bytes_FromString,
    .ctx_Bytes_FromStringAndSize = &debug_ctx_Bytes_FromStringAndSize,
    .ctx_Unicode_FromString = &debug_ctx_Unicode_FromString,
    .ctx_Unicode_Check = &debug_ctx_Unicode_Check,
    .ctx_Unicode_AsUTF8String = &debug_ctx_Unicode_AsUTF8String,
    .ctx_Unicode_FromWideChar = &debug_ctx_Unicode_FromWideChar,
    .ctx_List_Check = &debug_ctx_List_Check,
    .ctx_List_New = &debug_ctx_List_New,
    .ctx_List_Append = &debug_ctx_List_Append,
    .ctx_Dict_Check = &debug_ctx_Dict_Check,
    .ctx_Dict_New = &debug_ctx_Dict_New,
    .ctx_Tuple_Check = &debug_ctx_Tuple_Check,
    .ctx_Tuple_FromArray = &debug_ctx_Tuple_FromArray,
    .ctx_FromPyObject = &debug_ctx_FromPyObject,
    .ctx_AsPyObject = &debug_ctx_AsPyObject,
    .ctx_CallRealFunctionFromTrampoline = &debug_ctx_CallRealFunctionFromTrampoline,
    .ctx_CallDestroyAndThenDealloc = &debug_ctx_CallDestroyAndThenDealloc,
    .ctx_ListBuilder_New = &debug_ctx_ListBuilder_New,
    .ctx_ListBuilder_Set = &debug_ctx_ListBuilder_Set,
    .ctx_ListBuilder_Build = &debug_ctx_ListBuilder_Build,
    .ctx_ListBuilder_Cancel = &debug_ctx_ListBuilder_Cancel,
    .ctx_TupleBuilder_New = &debug_ctx_TupleBuilder_New,
    .ctx_TupleBuilder_Set = &debug_ctx_TupleBuilder_Set,
    .ctx_TupleBuilder_Build = &debug_ctx_TupleBuilder_Build,
    .ctx_TupleBuilder_Cancel = &debug_ctx_TupleBuilder_Cancel,
    .ctx_Tracker_New = &debug_ctx_Tracker_New,
    .ctx_Tracker_Add = &debug_ctx_Tracker_Add,
    .ctx_Tracker_ForgetAll = &debug_ctx_Tracker_ForgetAll,
    .ctx_Tracker_Close = &debug_ctx_Tracker_Close,
    .ctx_Dump = &debug_ctx_Dump,
};
