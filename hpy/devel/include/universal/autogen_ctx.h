
/*
   DO NOT EDIT THIS FILE!

   This file is automatically generated by tools/autogen.py from tools/public_api.h.
   Run this to regenerate:
       make autogen

*/

struct _HPyContext_s {
    int ctx_version;
    HPy h_None;
    HPy h_True;
    HPy h_False;
    HPy h_ValueError;
    HPy h_TypeError;
    HPy (*ctx_Module_Create)(HPyContext ctx, HPyModuleDef *def);
    HPy (*ctx_Dup)(HPyContext ctx, HPy h);
    void (*ctx_Close)(HPyContext ctx, HPy h);
    HPy (*ctx_Long_FromLong)(HPyContext ctx, long value);
    HPy (*ctx_Long_FromLongLong)(HPyContext ctx, long long v);
    HPy (*ctx_Long_FromUnsignedLongLong)(HPyContext ctx, unsigned long long v);
    long (*ctx_Long_AsLong)(HPyContext ctx, HPy h);
    HPy (*ctx_Float_FromDouble)(HPyContext ctx, double v);
    HPy (*ctx_Add)(HPyContext ctx, HPy h1, HPy h2);
    HPy (*ctx_Subtract)(HPyContext ctx, HPy h1, HPy h2);
    HPy (*ctx_Multiply)(HPyContext ctx, HPy h1, HPy h2);
    HPy (*ctx_MatrixMultiply)(HPyContext ctx, HPy h1, HPy h2);
    HPy (*ctx_FloorDivide)(HPyContext ctx, HPy h1, HPy h2);
    HPy (*ctx_TrueDivide)(HPyContext ctx, HPy h1, HPy h2);
    HPy (*ctx_Remainder)(HPyContext ctx, HPy h1, HPy h2);
    HPy (*ctx_Divmod)(HPyContext ctx, HPy h1, HPy h2);
    HPy (*ctx_Power)(HPyContext ctx, HPy h1, HPy h2, HPy h3);
    HPy (*ctx_Negative)(HPyContext ctx, HPy h1);
    HPy (*ctx_Positive)(HPyContext ctx, HPy h1);
    HPy (*ctx_Absolute)(HPyContext ctx, HPy h1);
    HPy (*ctx_Invert)(HPyContext ctx, HPy h1);
    HPy (*ctx_Lshift)(HPyContext ctx, HPy h1, HPy h2);
    HPy (*ctx_Rshift)(HPyContext ctx, HPy h1, HPy h2);
    HPy (*ctx_And)(HPyContext ctx, HPy h1, HPy h2);
    HPy (*ctx_Xor)(HPyContext ctx, HPy h1, HPy h2);
    HPy (*ctx_Or)(HPyContext ctx, HPy h1, HPy h2);
    HPy (*ctx_Index)(HPyContext ctx, HPy h1);
    HPy (*ctx_Long)(HPyContext ctx, HPy h1);
    HPy (*ctx_Float)(HPyContext ctx, HPy h1);
    HPy (*ctx_InPlaceAdd)(HPyContext ctx, HPy h1, HPy h2);
    HPy (*ctx_InPlaceSubtract)(HPyContext ctx, HPy h1, HPy h2);
    HPy (*ctx_InPlaceMultiply)(HPyContext ctx, HPy h1, HPy h2);
    HPy (*ctx_InPlaceMatrixMultiply)(HPyContext ctx, HPy h1, HPy h2);
    HPy (*ctx_InPlaceFloorDivide)(HPyContext ctx, HPy h1, HPy h2);
    HPy (*ctx_InPlaceTrueDivide)(HPyContext ctx, HPy h1, HPy h2);
    HPy (*ctx_InPlaceRemainder)(HPyContext ctx, HPy h1, HPy h2);
    HPy (*ctx_InPlacePower)(HPyContext ctx, HPy h1, HPy h2, HPy h3);
    HPy (*ctx_InPlaceLshift)(HPyContext ctx, HPy h1, HPy h2);
    HPy (*ctx_InPlaceRshift)(HPyContext ctx, HPy h1, HPy h2);
    HPy (*ctx_InPlaceAnd)(HPyContext ctx, HPy h1, HPy h2);
    HPy (*ctx_InPlaceXor)(HPyContext ctx, HPy h1, HPy h2);
    HPy (*ctx_InPlaceOr)(HPyContext ctx, HPy h1, HPy h2);
    void (*ctx_Err_SetString)(HPyContext ctx, HPy h_type, const char *message);
    int (*ctx_Err_Occurred)(HPyContext ctx);
    int (*ctx_Object_IsTrue)(HPyContext ctx, HPy h);
    HPy (*ctx_Type_FromSpec)(HPyContext ctx, HPyType_Spec *spec);
    HPy (*ctx_GetAttr)(HPyContext ctx, HPy obj, HPy name);
    HPy (*ctx_GetAttr_s)(HPyContext ctx, HPy obj, const char *name);
    int (*ctx_HasAttr)(HPyContext ctx, HPy obj, HPy name);
    int (*ctx_HasAttr_s)(HPyContext ctx, HPy obj, const char *name);
    int (*ctx_SetAttr)(HPyContext ctx, HPy obj, HPy name, HPy value);
    int (*ctx_SetAttr_s)(HPyContext ctx, HPy obj, const char *name, HPy value);
    HPy (*ctx_GetItem)(HPyContext ctx, HPy obj, HPy key);
    HPy (*ctx_GetItem_i)(HPyContext ctx, HPy obj, HPy_ssize_t idx);
    HPy (*ctx_GetItem_s)(HPyContext ctx, HPy obj, const char *key);
    int (*ctx_SetItem)(HPyContext ctx, HPy obj, HPy key, HPy value);
    int (*ctx_SetItem_i)(HPyContext ctx, HPy obj, HPy_ssize_t idx, HPy value);
    int (*ctx_SetItem_s)(HPyContext ctx, HPy obj, const char *key, HPy value);
    void *(*ctx_Cast)(HPyContext ctx, HPy h);
    HPy (*ctx_New)(HPyContext ctx, HPy h_type, void **data);
    int (*ctx_Bytes_Check)(HPyContext ctx, HPy h);
    HPy_ssize_t (*ctx_Bytes_Size)(HPyContext ctx, HPy h);
    HPy_ssize_t (*ctx_Bytes_GET_SIZE)(HPyContext ctx, HPy h);
    char *(*ctx_Bytes_AsString)(HPyContext ctx, HPy h);
    char *(*ctx_Bytes_AS_STRING)(HPyContext ctx, HPy h);
    HPy (*ctx_Unicode_FromString)(HPyContext ctx, const char *utf8);
    int (*ctx_Unicode_Check)(HPyContext ctx, HPy h);
    HPy (*ctx_Unicode_AsUTF8String)(HPyContext ctx, HPy h);
    HPy (*ctx_Unicode_FromWideChar)(HPyContext ctx, const wchar_t *w, HPy_ssize_t size);
    HPy (*ctx_List_New)(HPyContext ctx, HPy_ssize_t len);
    int (*ctx_List_Append)(HPyContext ctx, HPy h_list, HPy h_item);
    HPy (*ctx_Dict_New)(HPyContext ctx);
    int (*ctx_Dict_SetItem)(HPyContext ctx, HPy h_dict, HPy h_key, HPy h_val);
    HPy (*ctx_Dict_GetItem)(HPyContext ctx, HPy h_dict, HPy h_key);
    HPy (*ctx_FromPyObject)(HPyContext ctx, cpy_PyObject *obj);
    cpy_PyObject *(*ctx_AsPyObject)(HPyContext ctx, HPy h);
    cpy_PyObject *(*ctx_CallRealFunctionFromTrampoline)(HPyContext ctx, HPyFunc_Signature sig, void *func, void *args);
};
