jobs:
- job: LibraryTests
  pool:
    vmImage: '$(imageName)'
  displayName: 'Main tests'
  strategy:
    matrix:
      py36:
        python.version: '3.6'
        imageName: 'ubuntu-latest'
      py37:
        python.version: '3.7'
        imageName: 'ubuntu-latest'
      py38:
        python.version: '3.8'
        imageName: 'ubuntu-latest'
      py39:
        python.version: '3.9'
        imageName: 'ubuntu-latest'
      py39-macos:
        python.version: '3.9'
        imageName: 'macos-latest'
      py38-win:
        python.version: '3.8'
        imageName: 'windows-latest'
  steps:
  - template: azure-templates/ccache.yml
    parameters:
      pythonVersion: $(python.version)
  - template: azure-templates/python.yml
    parameters:
      pythonVersion: $(python.version)
  - script: python -m pip install --upgrade pip wheel
    displayName: 'Install dependencies'
  - script: python -m pip install .
    displayName: 'Build project'
  - script: |
      pip install pytest pytest-azurepipelines pytest-xdist
      pytest -n auto test/
    displayName: 'pytest'

- job: c_test
  pool:
    vmImage: 'ubuntu-latest'
  displayName: "Run C tests"
  steps:
  - script: make -C c_test
    displayName: Run C tests

- job: PofTests
  pool:
    vmImage: '$(imageName)'
  displayName: 'proof-of-concept tests'
  strategy:
    matrix:
      py36:
        python.version: '3.6'
        imageName: 'ubuntu-latest'
      py37:
        python.version: '3.7'
        imageName: 'ubuntu-latest'
      py38:
        python.version: '3.8'
        imageName: 'ubuntu-latest'
      py39:
        python.version: '3.9'
        imageName: 'ubuntu-latest'
      py39-macos:
        python.version: '3.9'
        imageName: 'macos-latest'
      py38-win:
        python.version: '3.8'
        imageName: 'windows-latest'
  steps:
  - template: azure-templates/ccache.yml
    parameters:
      pythonVersion: $(python.version)
  - template: azure-templates/python.yml
    parameters:
      pythonVersion: $(python.version)
  - bash: proof-of-concept/test_pof.sh wheel cpython
    displayName: 'Test setup.py --hpy-abi=cpython bdist_wheel'
  - bash: proof-of-concept/test_pof.sh wheel universal
    displayName: 'Test setup.py --hpy-abi=universal bdist_wheel'
  - bash: proof-of-concept/test_pof.sh setup_py_install cpython
    displayName: 'Test setup.py --hpy-abi=cpython install'
  - bash: proof-of-concept/test_pof.sh setup_py_install universal
    displayName: 'Test setup.py --hpy-abi=universal install'
  - bash: proof-of-concept/test_pof.sh setup_py_build_ext_inplace cpython
    displayName: 'Test setup.py --hpy-abi=cpython build_ext --inplace'
  - bash: proof-of-concept/test_pof.sh setup_py_build_ext_inplace universal
    displayName: 'Test setup.py --hpy-abi=universal build_ext --inplace'



- job: CheckAutogen
  pool:
    vmImage: 'ubuntu-latest'
  displayName: 'Check autogen'
  steps:
  - template: azure-templates/python.yml
  - script: |
      pip install pycparser==2.20
      pip install py==1.8.0
      pip install packaging==19.2
      pip install attrs==19.3.0
    displayName: 'Install dependencies'
  - script: |
      make autogen
      if [ -z "$(git status --porcelain)" ]; then
          # clean working copy
          echo "Working copy is clean, everything ok"
      else
          # Uncommitted changes
          echo "ERROR: uncommitted changes after running make autogen"
          echo "git status"
          git status
          echo
          echo "git diff"
          git diff
          exit 1
      fi
    displayName: 'make autogen'

- job: CheckPy27
  pool:
    vmImage: 'ubuntu-latest'
  displayName: 'Check Python2.7 compatibility'
  steps:
  - template: azure-templates/python.yml
    parameters:
      pythonVersion: "2.7"
  - script: |
      pip install pytest pathlib
      python test/check_py27_compat.py
    displayName: 'check_py27_compat.py'

# - job: CPPCheck
#   pool:
#     vmImage: 'ubuntu-latest'
#   displayName: "Run CPPCheck"
#   steps:
#   - template: azure-templates/cppcheck.yml
#   - template: azure-templates/python.yml
#   - script: make cppcheck
#     displayName: Run CPPCheck

- job: infer
  pool:
    vmImage: 'ubuntu-latest'
  displayName: "Run infer"
  steps:
  - template: azure-templates/python.yml
  - script: |
      pip install compiledb wheel;
      VERSION=1.1.0; \
      curl -sSL "https://github.com/facebook/infer/releases/download/v$VERSION/infer-linux64-v$VERSION.tar.xz" \
      | sudo tar -C /opt -xJ && \
      echo "##vso[task.prependpath]/opt/infer-linux64-v$VERSION/bin"
    displayName: Install infer
  - script: make infer
    displayName: Run infer

- job: Valgrind
  pool:
    vmImage: 'ubuntu-latest'
  displayName: 'Run valgrind'
  steps:
  - template: azure-templates/ccache.yml
  - template: azure-templates/python.yml
  - script: sudo apt update && sudo apt install -y valgrind
    displayName: 'Install valgrind'
  - script: python -m pip install --upgrade pip
    displayName: 'Install dependencies'
  - script: python -m pip install .
    displayName: 'Build project'
  - script: |
      pip install pytest pytest-azurepipelines pytest-valgrind
      make valgrind

- job: BuildDocs
  pool:
    vmImage: 'ubuntu-latest'
  displayName: 'Build documentation'
  steps:
  - template: azure-templates/python.yml
  - script: sudo apt update && sudo apt install -y libclang-10-dev
    displayName: 'Install libclang-10-dev'
  - script: python -m pip install --upgrade pip
    displayName: 'Upgrade pip'
  - script: python -m pip install -r docs/requirements.txt
    displayName: 'Install documentation requirements'
  - script: |
      cd docs;
      python -m sphinx -T -W -E -b html -d _build/doctrees -D language=en . _build/html
