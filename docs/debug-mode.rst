Debug Mode
==========

HPy includes a debug mode which includes a lot of useful run-time checks to
ensure that C extensions use the API correctly. The major points of the debug mode are:

    1. no special compilation flags are required: it is enough to compile the extension 
       with the Universal ABI.
    
    2. The debug mode can be activated at *import time*, and it can be activated
       per-extension.
    
    3. You pay the overhead of the debug mode only if you use it. Extensions loaded 
       without the debug mode run at full speed.

This is possible because the whole of the HPy API is provided
as part of the HPy context, so debug mode can pass in a special debugging
context (that wraps the normal context) without affecting the performance of
the regular context at all.

The debugging context can already check for:

* Leaked handles.
* Handles used after they are closed.
* Reading from a memory which is no longer guaranteed to be still valid,
  for example, the buffer returned by ``HPyUnicode_AsUTF8AndSize`` after the
  corresponding ``HPy`` handle was closed.
* Writing to a memory which should be read-only, for example,
  the buffer returned by ``HPyUnicode_AsUTF8AndSize``.

An HPy module may be explicitly loaded in debug mode using::

  mod = hpy.universal.load(module_name, so_filename, debug=True)

The default module loader generated by HPy also recognizes environment
variable ``HPY_DEBUG_CONTEXT``. If ``HPY_DEBUG_CONTEXT=1``, then all HPy
modules are loaded with debug context. Alternatively ``HPY_DEBUG_CONTEXT``
can be set to a comma separated list of names of the modules that should
be loaded in the debug mode.

The HPy debug module also exposes `LeakDetector` class for detection of
leaked handles. `LeakDetector` can be used to check that some code does
not leave behind unclosed `HPy` handles. For example:

.. literalinclude:: examples/tests.py
  :language: python
  :start-at: def test_leak_detector
  :end-at: # Run some HPy extension code

Additionally, the debug module also exposes pytest fixture `hpy_debug` that
for the time being enables the `LeakDetector`, but may also enable other
useful debugging facilities.

.. literalinclude:: examples/tests.py
  :language: python
  :start-at: from hpy.debug.pytest import hpy_debug
  :end-at: # Run some HPy extension code

**ATTENTION**: the usage of `LeakDetector` or `hpy_debug` by itself does not
enable the HPy debug mode! If the debug mode is not enabled for any extension,
then those features do nothing useful (but also nothing harmful).

When dealing with handle leaks, it is useful to get a stack trace of the
allocation of the leaked handle. This feature has large memory requirements
and is therefore opt-in. It can be activated by:

.. literalinclude:: examples/tests.py
  :language: python
  :start-at: hpy.debug.set_handle_stack_trace_limit
  :end-at: hpy.debug.set_handle_stack_trace_limit

and disabled by:

.. literalinclude:: examples/tests.py
  :language: python
  :start-at: hpy.debug.disable_handle_stack_traces
  :end-at: hpy.debug.disable_handle_stack_traces